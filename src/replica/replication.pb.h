// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: replication.proto
// Protobuf C++ Version: 5.29.3

#ifndef replication_2eproto_2epb_2eh
#define replication_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_replication_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_replication_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_replication_2eproto;
namespace blp {
class DataEntry;
struct DataEntryDefaultTypeInternal;
extern DataEntryDefaultTypeInternal _DataEntry_default_instance_;
class SyncMessage;
struct SyncMessageDefaultTypeInternal;
extern SyncMessageDefaultTypeInternal _SyncMessage_default_instance_;
}  // namespace blp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace blp {
enum SyncMessage_MsgType : int {
  SyncMessage_MsgType_FULL_DATA = 0,
  SyncMessage_MsgType_INCREMENT_DATA = 1,
  SyncMessage_MsgType_FULL_SYNC_END = 2,
  SyncMessage_MsgType_INCREMENT_SYNC_END = 3,
};

bool SyncMessage_MsgType_IsValid(int value);
extern const uint32_t SyncMessage_MsgType_internal_data_[];
constexpr SyncMessage_MsgType SyncMessage_MsgType_MsgType_MIN = static_cast<SyncMessage_MsgType>(0);
constexpr SyncMessage_MsgType SyncMessage_MsgType_MsgType_MAX = static_cast<SyncMessage_MsgType>(3);
constexpr int SyncMessage_MsgType_MsgType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SyncMessage_MsgType_descriptor();
template <typename T>
const std::string& SyncMessage_MsgType_Name(T value) {
  static_assert(std::is_same<T, SyncMessage_MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return SyncMessage_MsgType_Name(static_cast<SyncMessage_MsgType>(value));
}
template <>
inline const std::string& SyncMessage_MsgType_Name(SyncMessage_MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SyncMessage_MsgType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SyncMessage_MsgType_Parse(absl::string_view name, SyncMessage_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncMessage_MsgType>(
      SyncMessage_MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class DataEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blp.DataEntry) */ {
 public:
  inline DataEntry() : DataEntry(nullptr) {}
  ~DataEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataEntry(const DataEntry& from) : DataEntry(nullptr, from) {}
  inline DataEntry(DataEntry&& from) noexcept
      : DataEntry(nullptr, std::move(from)) {}
  inline DataEntry& operator=(const DataEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataEntry& operator=(DataEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataEntry* internal_default_instance() {
    return reinterpret_cast<const DataEntry*>(
        &_DataEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DataEntry& a, DataEntry& b) { a.Swap(&b); }
  inline void Swap(DataEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataEntry& from) { DataEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blp.DataEntry"; }

 protected:
  explicit DataEntry(::google::protobuf::Arena* arena);
  DataEntry(::google::protobuf::Arena* arena, const DataEntry& from);
  DataEntry(::google::protobuf::Arena* arena, DataEntry&& from) noexcept
      : DataEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kSequenceFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // required string value = 3;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // required uint64 sequence = 1;
  bool has_sequence() const;
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:blp.DataEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataEntry& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::uint64_t sequence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class SyncMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blp.SyncMessage) */ {
 public:
  inline SyncMessage() : SyncMessage(nullptr) {}
  ~SyncMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SyncMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SyncMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncMessage(const SyncMessage& from) : SyncMessage(nullptr, from) {}
  inline SyncMessage(SyncMessage&& from) noexcept
      : SyncMessage(nullptr, std::move(from)) {}
  inline SyncMessage& operator=(const SyncMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncMessage& operator=(SyncMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncMessage* internal_default_instance() {
    return reinterpret_cast<const SyncMessage*>(
        &_SyncMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SyncMessage& a, SyncMessage& b) { a.Swap(&b); }
  inline void Swap(SyncMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SyncMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncMessage& from) { SyncMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SyncMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blp.SyncMessage"; }

 protected:
  explicit SyncMessage(::google::protobuf::Arena* arena);
  SyncMessage(::google::protobuf::Arena* arena, const SyncMessage& from);
  SyncMessage(::google::protobuf::Arena* arena, SyncMessage&& from) noexcept
      : SyncMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MsgType = SyncMessage_MsgType;
  static constexpr MsgType FULL_DATA = SyncMessage_MsgType_FULL_DATA;
  static constexpr MsgType INCREMENT_DATA = SyncMessage_MsgType_INCREMENT_DATA;
  static constexpr MsgType FULL_SYNC_END = SyncMessage_MsgType_FULL_SYNC_END;
  static constexpr MsgType INCREMENT_SYNC_END = SyncMessage_MsgType_INCREMENT_SYNC_END;
  static inline bool MsgType_IsValid(int value) {
    return SyncMessage_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN = SyncMessage_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX = SyncMessage_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE = SyncMessage_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
    return SyncMessage_MsgType_descriptor();
  }
  template <typename T>
  static inline const std::string& MsgType_Name(T value) {
    return SyncMessage_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
    return SyncMessage_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kFullChunkFieldNumber = 3,
    kEntryFieldNumber = 2,
    kTypeFieldNumber = 1,
    kIsLastChunkFieldNumber = 4,
  };
  // optional bytes full_chunk = 3;
  bool has_full_chunk() const;
  void clear_full_chunk() ;
  const std::string& full_chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_full_chunk();
  PROTOBUF_NODISCARD std::string* release_full_chunk();
  void set_allocated_full_chunk(std::string* value);

  private:
  const std::string& _internal_full_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_chunk(
      const std::string& value);
  std::string* _internal_mutable_full_chunk();

  public:
  // optional .blp.DataEntry entry = 2;
  bool has_entry() const;
  void clear_entry() ;
  const ::blp::DataEntry& entry() const;
  PROTOBUF_NODISCARD ::blp::DataEntry* release_entry();
  ::blp::DataEntry* mutable_entry();
  void set_allocated_entry(::blp::DataEntry* value);
  void unsafe_arena_set_allocated_entry(::blp::DataEntry* value);
  ::blp::DataEntry* unsafe_arena_release_entry();

  private:
  const ::blp::DataEntry& _internal_entry() const;
  ::blp::DataEntry* _internal_mutable_entry();

  public:
  // required .blp.SyncMessage.MsgType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::blp::SyncMessage_MsgType type() const;
  void set_type(::blp::SyncMessage_MsgType value);

  private:
  ::blp::SyncMessage_MsgType _internal_type() const;
  void _internal_set_type(::blp::SyncMessage_MsgType value);

  public:
  // optional bool is_last_chunk = 4;
  bool has_is_last_chunk() const;
  void clear_is_last_chunk() ;
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);

  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blp.SyncMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SyncMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr full_chunk_;
    ::blp::DataEntry* entry_;
    int type_;
    bool is_last_chunk_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class ReplicationService_Stub;
class ReplicationService : public ::google::protobuf::Service {
 protected:
  ReplicationService() = default;

 public:
  using Stub = ReplicationService_Stub;

  ReplicationService(const ReplicationService&) = delete;
  ReplicationService& operator=(const ReplicationService&) = delete;
  virtual ~ReplicationService() = default;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Sync(::google::protobuf::RpcController* controller,
                        const ::blp::SyncMessage* request,
                        ::blp::SyncMessage* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::google::protobuf::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;

  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;
};

class ReplicationService_Stub final : public ReplicationService {
 public:
  ReplicationService_Stub(::google::protobuf::RpcChannel* channel);
  ReplicationService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);

  ReplicationService_Stub(const ReplicationService_Stub&) = delete;
  ReplicationService_Stub& operator=(const ReplicationService_Stub&) = delete;

  ~ReplicationService_Stub() override;

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ReplicationService ------------------------------------------
  void Sync(::google::protobuf::RpcController* controller,
                        const ::blp::SyncMessage* request,
                        ::blp::SyncMessage* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DataEntry

// required uint64 sequence = 1;
inline bool DataEntry::has_sequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DataEntry::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t DataEntry::sequence() const {
  // @@protoc_insertion_point(field_get:blp.DataEntry.sequence)
  return _internal_sequence();
}
inline void DataEntry::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:blp.DataEntry.sequence)
}
inline ::uint64_t DataEntry::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void DataEntry::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// required string key = 2;
inline bool DataEntry::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DataEntry::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataEntry::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blp.DataEntry.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataEntry::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blp.DataEntry.key)
}
inline std::string* DataEntry::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:blp.DataEntry.key)
  return _s;
}
inline const std::string& DataEntry::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void DataEntry::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* DataEntry::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* DataEntry::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blp.DataEntry.key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.key_.Set("", GetArena());
  }
  return released;
}
inline void DataEntry::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blp.DataEntry.key)
}

// required string value = 3;
inline bool DataEntry::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DataEntry::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataEntry::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blp.DataEntry.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataEntry::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blp.DataEntry.value)
}
inline std::string* DataEntry::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:blp.DataEntry.value)
  return _s;
}
inline const std::string& DataEntry::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void DataEntry::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* DataEntry::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* DataEntry::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blp.DataEntry.value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.value_.Set("", GetArena());
  }
  return released;
}
inline void DataEntry::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blp.DataEntry.value)
}

// -------------------------------------------------------------------

// SyncMessage

// required .blp.SyncMessage.MsgType type = 1;
inline bool SyncMessage::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SyncMessage::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::blp::SyncMessage_MsgType SyncMessage::type() const {
  // @@protoc_insertion_point(field_get:blp.SyncMessage.type)
  return _internal_type();
}
inline void SyncMessage::set_type(::blp::SyncMessage_MsgType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:blp.SyncMessage.type)
}
inline ::blp::SyncMessage_MsgType SyncMessage::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blp::SyncMessage_MsgType>(_impl_.type_);
}
inline void SyncMessage::_internal_set_type(::blp::SyncMessage_MsgType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::blp::SyncMessage_MsgType_IsValid(value));
  _impl_.type_ = value;
}

// optional .blp.DataEntry entry = 2;
inline bool SyncMessage::has_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entry_ != nullptr);
  return value;
}
inline void SyncMessage::clear_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.entry_ != nullptr) _impl_.entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::blp::DataEntry& SyncMessage::_internal_entry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blp::DataEntry* p = _impl_.entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::blp::DataEntry&>(::blp::_DataEntry_default_instance_);
}
inline const ::blp::DataEntry& SyncMessage::entry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blp.SyncMessage.entry)
  return _internal_entry();
}
inline void SyncMessage::unsafe_arena_set_allocated_entry(::blp::DataEntry* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.entry_);
  }
  _impl_.entry_ = reinterpret_cast<::blp::DataEntry*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blp.SyncMessage.entry)
}
inline ::blp::DataEntry* SyncMessage::release_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blp::DataEntry* released = _impl_.entry_;
  _impl_.entry_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blp::DataEntry* SyncMessage::unsafe_arena_release_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blp.SyncMessage.entry)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blp::DataEntry* temp = _impl_.entry_;
  _impl_.entry_ = nullptr;
  return temp;
}
inline ::blp::DataEntry* SyncMessage::_internal_mutable_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.entry_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blp::DataEntry>(GetArena());
    _impl_.entry_ = reinterpret_cast<::blp::DataEntry*>(p);
  }
  return _impl_.entry_;
}
inline ::blp::DataEntry* SyncMessage::mutable_entry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blp::DataEntry* _msg = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:blp.SyncMessage.entry)
  return _msg;
}
inline void SyncMessage::set_allocated_entry(::blp::DataEntry* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.entry_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.entry_ = reinterpret_cast<::blp::DataEntry*>(value);
  // @@protoc_insertion_point(field_set_allocated:blp.SyncMessage.entry)
}

// optional bytes full_chunk = 3;
inline bool SyncMessage::has_full_chunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SyncMessage::clear_full_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_chunk_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncMessage::full_chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blp.SyncMessage.full_chunk)
  return _internal_full_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncMessage::set_full_chunk(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blp.SyncMessage.full_chunk)
}
inline std::string* SyncMessage::mutable_full_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_full_chunk();
  // @@protoc_insertion_point(field_mutable:blp.SyncMessage.full_chunk)
  return _s;
}
inline const std::string& SyncMessage::_internal_full_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.full_chunk_.Get();
}
inline void SyncMessage::_internal_set_full_chunk(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_chunk_.Set(value, GetArena());
}
inline std::string* SyncMessage::_internal_mutable_full_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.full_chunk_.Mutable( GetArena());
}
inline std::string* SyncMessage::release_full_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blp.SyncMessage.full_chunk)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.full_chunk_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.full_chunk_.Set("", GetArena());
  }
  return released;
}
inline void SyncMessage::set_allocated_full_chunk(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.full_chunk_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.full_chunk_.IsDefault()) {
    _impl_.full_chunk_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blp.SyncMessage.full_chunk)
}

// optional bool is_last_chunk = 4;
inline bool SyncMessage::has_is_last_chunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SyncMessage::clear_is_last_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_last_chunk_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool SyncMessage::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:blp.SyncMessage.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void SyncMessage::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:blp.SyncMessage.is_last_chunk)
}
inline bool SyncMessage::_internal_is_last_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_last_chunk_;
}
inline void SyncMessage::_internal_set_is_last_chunk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_last_chunk_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blp


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::blp::SyncMessage_MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blp::SyncMessage_MsgType>() {
  return ::blp::SyncMessage_MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // replication_2eproto_2epb_2eh
